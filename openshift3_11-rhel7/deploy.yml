- name: Deploy CentOS Atomic 7 Virtual Appliance
  hosts: all
  gather_facts: false

  tasks:
  - name: deploy VMs
    vmware_guest:
      hostname: "{{ vmware_host }}"
      username: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      validate_certs: no
      name: "{{ inventory_hostname }}"
      template: "{{ vm_template }}"
      datacenter: "{{ datacenter }}"
      folder: "{{ vmware_folder }}"
      state: present
      cluster: "{{ cluster }}"
      disk:
      - size_gb: "{{ disk_size_gb }}"
        type: thin
        datastore: "{{ datastore }}"
        autoselect_datastore: true
      hardware:
        num_cpus: "{{ num_cpus }}"
        num_cpu_cores_per_socket: 2
        memory_mb: "{{ mem_mb }}"
      networks:
        - name: "{{ portgroup }}"
          ip: "{{ ip }}"
          netmask: "{{ netmask }}"
          gateway: "{{ gateway }}"
          mac: "{{ mac }}"
    delegate_to: 127.0.0.1
    tags: init

  - name: Modify NIC MAC Address
    vmware_guest_network:
      hostname: "{{ vmware_host }}"
      username: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      validate_certs: no
      name: "{{ inventory_hostname }}"
      datacenter: "{{ datacenter }}"
      gather_network_info: false
      cluster: "{{ cluster }}"
      networks:
        - name: "{{ portgroup }}"
          device_type: 'vmxnet3'
          state: present
          manual_mac: "{{ mac }}"
    delegate_to: 127.0.0.1

  - name: configure an ipv4 a record
    nios_a_record:
      name: "{{ inventory_hostname }}"
      comment: Added by Openshift install
      ipv4: "{{ ip }}"
      state: present
      provider:
       host: "{{ nios_provider }}"
       username: "{{ iblox_admin_user }}"
       password: "{{ iblox_admin_pw }}"
    delegate_to: localhost

  - name: configure an ipv4 ptr record
    nios_ptr_record:
      ptrdname: "{{ inventory_hostname }}"
      comment: Added by Openshift install
      ipv4: "{{ ip }}"
      state: present
      provider:
       host: "{{ nios_provider }}"
       username: "{{ iblox_admin_user }}"
       password: "{{ iblox_admin_pw }}"
    delegate_to: localhost
    ignore_errors: yes

  - name: configure a dhcp static
    nios_fixed_address:
      name: "{{ inventory_hostname }}"
      comment: Added by Openshift install
      ipaddr: "{{ ip }}"
      mac: "{{ mac }}"
      network: "{{ network }}"
      state: present
      provider:
       host: "{{ nios_provider }}"
       username: "{{ iblox_admin_user }}"
       password: "{{ iblox_admin_pw }}"
    delegate_to: localhost
    ignore_errors: yes

  - name: Restart Infoblox Services
    uri:
      url: "https://{{ nios_provider }}/wapi/v2.5/grid/b25lLmNsdXN0ZXIkMA:{{ iblox_key }}?_function=restartservices"
      user: "{{ iblox_admin_user }}"
      password: "{{ iblox_admin_pw }}"
      method: POST
      body: '{"restart_option": "RESTART_IF_NEEDED"}'
      body_format: json
      headers:
        Content-Type: "application/json"
      validate_certs: false
    delegate_to: localhost

  - name: Power up VMs
    vmware_guest_powerstate:
      hostname: "{{ vmware_host }}"
      username: "{{ admin_user }}"
      password: "{{ admin_pw }}"
      name: "{{ inventory_hostname }}"
      validate_certs: no
      folder: "{{ vmware_folder }}"
      state: powered-on
    delegate_to: 127.0.0.1

  - name: Wait for system to become reachable
    wait_for_connection:

  - hostname:
      name: "{{ inventory_hostname }}"

  - name: Set UTC timezone
    timezone: name=UTC

  - name: Stop and disable firewalld
    service:
      name: firewalld
      state: stopped
      enabled: False

  - name: Download cert 1
    get_url:
      url: https://nexus.ercot.com/nexus/service/local/repositories/mvnsite/content/certs/ERCOTROOTCA.pem
      dest: /etc/pki/ca-trust/source/anchors/
      mode: '0440'
      validate_certs: no

  - name: Download cert 2
    get_url:
      url: https://nexus.ercot.com/nexus/service/local/repositories/mvnsite/content/certs/ERCOTIssueCA01.pem
      dest: /etc/pki/ca-trust/source/anchors/
      mode: '0440'
      validate_certs: no

  - name: Download cert 3
    get_url:
      url: https://nexus.ercot.com/nexus/service/local/repositories/mvnsite/content/certs/Ercotissueca02.pem
      dest: /etc/pki/ca-trust/source/anchors/
      mode: '0440'
      validate_certs: no

  - name: Run certificate update
    command:
      cmd: /bin/update-ca-trust enable; /bin/update-ca-trust extract

  - name: Creates directory
    file:
      path: /root/.ssh
      owner: root
      group: root
      mode: '0700'
      state: directory

  - name: Generate ssh key pair on master
    openssh_keypair:
      path: /root/.ssh/id_rsa
      force: True
    when: inventory_hostname is search("0001")
#    when: >
#      ( inventory_hostname is search("0001") or 
#      ( inventory_hostname is search("0007") and "ittvsdt" not in inventory_hostname) ) or
#      ( inventory_hostname is search("0008") and "ittvsdt" in inventory_hostname) ) 

  - name: Get public key from master
    fetch:
      src: /root/.ssh/id_rsa.pub
      dest: /tmp/
    when: inventory_hostname is search("0001")

  - name: Copy public key to other VMs
    copy:
      src: "{{ tmp_pub_key_loc }}"
      dest: /root/.ssh/id_rsa.pub
      owner: root
      group: root
      mode: '0444'
      force: yes

  - name: Copy public key into other VMs authorized_keys
    copy:
      src: "{{ tmp_pub_key_loc }}"
      dest: /root/.ssh/authorized_keys
      owner: root
      group: root
      mode: '0600'
      force: yes

  - name: Create known_hosts on master
    template: src="{{ env_known_hosts }}" dest="/root/.ssh/known_hosts"
    when: inventory_hostname is search("0001")

  - name: Add ntp server to chrony
    lineinfile:
      path: /etc/chrony.conf
      line: server ntp.ercot.com
  
  - name: enable
    service:
      name: chronyd
      state: restarted
      enabled: true
  
  - name: copy up the openshift inventory file
    copy:
      src: "{{ openshift_inv_file }}"
      dest: /root/openshift-install.yml
    when: inventory_hostname is search("0001")

  - name: copy up the ldap groups file
    copy:
      src: ldap.yml
      dest: /root/ldap.yml
    when: inventory_hostname is search("0001")

  - name: Create directory for facts file
    file:
      path: /etc/facter/facts.d
      state: directory
      owner: root
      group: root
      mode: '0644'

  - name: Create facts file on VM
    template: src="{{ facts_file }}" dest="/etc/facter/facts.d/jira.yaml"

  - name: download puppet installation script
    command: curl -k -O -1 -s https:/dev-puppet.ercot.com:8140/packages/current/install.bash
    args:
      warn: false

  - name: change perms on script
    file:
      path: /root/install.bash
      mode: '0744'

  - name: install puppet
    command: /root/install.bash
    args:
      warn: false

  - name: Ensure server parameter points to proper puppet master
    lineinfile:
      path: /etc/puppetlabs/puppet/puppet.conf
      regexp: '^server ='
      line: server = dev-puppet.ercot.com

  - name: Ensure server_list parameter points to the proper puppet master's port
    lineinfile:
      path: /etc/puppetlabs/puppet/puppet.conf
      regexp: '^server_list ='
      line: server_list = dev-puppet.ercot.com:8140




  - name: puppet run with wait to complete
    shell: c=1; while((c>0)); do c=$(ps -ef | egrep "puppet agent" | egrep -v "grep" | egrep "\-\-onetime" | wc -l | awk '{print $1}'); sleep 1; done

  - name: run puppet agent
    shell: i=0; rc=1; while(( i<4 && rc!=0 )); do /usr/bin/puppet agent -t; rc=$?; ((i++)); sleep 2m; done

  - name: upgrade all packages
    yum:
      name: '*'
      state: latest
    register: yum_out

  - name: wait for yum to complete
    shell: c=1; while((c>0)); do c=$(ps -ef | egrep "yum" | egrep -v "grep" | wc -l | awk '{print $1}'); sleep 1; done

  - name: get yum ouptut
    debug:
      var: yum_out

  - name: reboot to apply changes from yum
    reboot:

  - name: Wait for system to become reachable
    wait_for_connection:

  - name: Install tools used by OpenShift
    yum:
      name: "{{ packages }}"
    vars:
      packages:
      - wget 
      - git 
      - net-tools 
      - bind-utils 
      - iptables-services 
      - bridge-utils 
      - bash-completion 
      - kexec-tools 
      - sos 
      - psacct

  - name: Yum update
    yum:
      name: '*'
      state: latest

  - name: Reboot to apply changes from yum
    reboot:

  - name: Wait for system to become reachable
    wait_for_connection:

  - name: Install OpenShift 
    yum:
      name: openshift-ansible

  - name: Install cri-o
    yum:
      name: cri-o

  - name: Start puppet
    systemd:
      name: puppet
      state: started
  
  - name: Enable puppet
    systemd:
      name: puppet
      enabled: yes



  - name: install Openshift 311
    shell: ansible-playbook -i /root/openshift-install.yml playbooks/deploy_cluster.yml
    args:
      chdir: /usr/share/ansible/openshift-ansible

  - name: Change the working directory to root and execute the group ldap import
    shell: oc adm groups sync --sync-config=/root/ldap.yml --confirm
    args:
      chdir: /root
    when: inventory_hostname is search("0001")

  - name: Make the group cluster admins
    shell: oc adm policy add-cluster-role-to-group cluster-admin "CIT Automation"
    args:
      chdir: /root
    when: inventory_hostname is search("0001")




  - meta: end_play

  - name: install OpenShift 311 Monitoring
    atomic_container:
      name: origin-ansible
      image: dev-registry.ercot.com/openshift/origin-ansible:v3.11
      state: latest
      mode: system
      backend: ostree
      values:
        - INVENTORY_FILE=/root/labinstall.yml
        - PLAYBOOK_FILE=/usr/share/ansible/openshift-ansible/playbooks/openshift-monitoring/config.yml
        - OPTS=-v
    ignore_errors: yes
    when: inventory_hostname is search("0001")

